{"remainingRequest":"C:\\VUE\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\VUE\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\VUE\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\VUE\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\VUE\\docs\\_posts\\note2.md?vue&type=template&id=88126c7c&","dependencies":[{"path":"C:\\VUE\\docs\\_posts\\note2.md","mtime":1636628337616},{"path":"C:\\VUE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636949869673},{"path":"C:\\VUE\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1636949870696},{"path":"C:\\VUE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636949869673},{"path":"C:\\VUE\\node_modules\\vue-loader\\lib\\index.js","mtime":1636949870129},{"path":"C:\\VUE\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1636949868704}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}